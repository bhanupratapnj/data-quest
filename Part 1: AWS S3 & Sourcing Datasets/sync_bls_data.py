{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1a5aadd9-5198-494f-b42a-e4f54b8001cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "import boto3\n",
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "\n",
    "# --- Configuration Section ---\n",
    "# Define your AWS S3 bucket name where the data will be synced\n",
    "S3_BUCKET_NAME = \"rearc-dataquest-s3bucket\"\n",
    "\n",
    "# Define the source URL where BLS (Bureau of Labor Statistics) data files are located\n",
    "BLS_SOURCE_URL = \"https://download.bls.gov/pub/time.series/pr/\"\n",
    "\n",
    "# Define request headers (BLS requires a valid User-Agent with contact info)\n",
    "REQUEST_HEADERS = {\n",
    "    \"User-Agent\": \"project/1.0 (bhanu.tcs@gmail.com)\"\n",
    "}\n",
    "\n",
    "# --- AWS S3 Initialization ---\n",
    "# Initialize an S3 resource using boto3 and refer to the target bucket\n",
    "s3_resource = boto3.resource('s3')\n",
    "s3_bucket = s3_resource.Bucket(S3_BUCKET_NAME)\n",
    "\n",
    "# --- Get Current Bucket Contents ---\n",
    "# Retrieve a list of all existing object keys (file names) in the S3 bucket\n",
    "existing_s3_files = [obj.key for obj in s3_bucket.objects.all()]\n",
    "print(\"Existing files in S3 bucket:\")\n",
    "print(existing_s3_files)\n",
    "\n",
    "# Make a copy of the existing S3 file list to track files that should be deleted later\n",
    "# These are files that exist in S3 but are no longer available on the BLS site.\n",
    "potentially_deleted_files = existing_s3_files.copy()\n",
    "\n",
    "# --- Scrape the BLS Directory Page ---\n",
    "# Send an HTTP GET request to the BLS data directory with headers\n",
    "response = requests.get(BLS_SOURCE_URL, headers=REQUEST_HEADERS)\n",
    "print(f\"BLS directory response status: {response.status_code}\")\n",
    "\n",
    "# Parse the HTML directory listing with BeautifulSoup\n",
    "soup = BeautifulSoup(response.text, 'html.parser')\n",
    "\n",
    "# --- Synchronize Files Between BLS and S3 ---\n",
    "# Iterate through all the hyperlinks (files) listed on the BLS data page\n",
    "for link_tag in soup.find_all(\"a\"):\n",
    "    file_name = link_tag.get_text()\n",
    "\n",
    "    # Skip the parent directory navigation link\n",
    "    if file_name == \"[To Parent Directory]\":\n",
    "        continue\n",
    "\n",
    "    file_url = BLS_SOURCE_URL + file_name\n",
    "\n",
    "    # Try to download the file from the BLS site\n",
    "    try:\n",
    "        file_response = requests.get(file_url)\n",
    "        file_response.raise_for_status()  # Raises an error for bad HTTP codes\n",
    "    except requests.RequestException as error:\n",
    "        print(f\"‚ùå Failed to download {file_name}: {error}\")\n",
    "        continue\n",
    "\n",
    "    # --- Upload New Files ---\n",
    "    if file_name not in existing_s3_files:\n",
    "        print(f\"‚¨ÜÔ∏è Uploading new file: {file_name}\")\n",
    "        s3_bucket.put_object(Key=file_name, Body=file_response.content)\n",
    "\n",
    "    # --- Update Existing Files ---\n",
    "    else:\n",
    "        # Retrieve the existing file from S3\n",
    "        s3_object = s3_bucket.Object(file_name).get()\n",
    "        existing_file_content = s3_object['Body'].read()\n",
    "\n",
    "        # Compare contents of S3 and BLS versions\n",
    "        if file_response.content != existing_file_content:\n",
    "            print(f\"üîÑ Updating modified file: {file_name}\")\n",
    "            s3_bucket.put_object(Key=file_name, Body=file_response.content)\n",
    "\n",
    "        # Remove the file from the \"to be deleted\" list since it's still active\n",
    "        potentially_deleted_files.remove(file_name)\n",
    "\n",
    "# --- Remove Obsolete Files ---\n",
    "# Delete files from S3 that no longer exist on the BLS website.\n",
    "# The only exception is \"nation_population.json\", which should remain (created in another script).\n",
    "for file_name in potentially_deleted_files:\n",
    "    if file_name != \"nation_population.json\":\n",
    "        print(f\"üóëÔ∏è Deleting obsolete file: {file_name}\")\n",
    "        s3_bucket.Object(file_name).delete()\n",
    "\n",
    "print(\"‚úÖ Sync complete.\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
